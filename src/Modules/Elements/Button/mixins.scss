///
/// Punica CSS Framework
/// Elements : Button -> Mixins
///

@use "../../../Core/Global/Getters" as *;
@use "../../../Core/Global/Options" as *;
@use "../../../Core/Global/Mixins" as *;
@use "../../../Core/Theme/Getters" as *;
@use "../../../Core/Theme/Setters" as *;

///
/// Dropdown
///
@mixin dropdown() {
	.#{class('button', 'dropdown')} {
		display: inline-block;
		position: relative;
		&>.#{class('menu', 'name')} {
			animation: slide-down .15s ease 1;
			display: none;
			left: 0;
			max-height: 45vh;
			overflow-y: auto;
			position: absolute;
			top: 100%;
			z-index: 300 + 1; // menu z-index + 1
			width: auto;
			&>.#{class('menu', 'item')} {
				& > a {
					padding: .1rem .9rem;
				}
			}
		}
		&.#{class('button', 'dropdown-right')},
		&.#{class('button', 'dropdown-left')} {
			&>.#{class('menu', 'name')} {
				top: 0;
			}
		}
		&.#{class('button', 'dropdown-right')} {
			&>.#{class('menu', 'name')} {
				left: 100%;
				right: auto;
			}
		}
		&.#{class('button', 'dropdown-left')} {
			&>.#{class('menu', 'name')} {
				left: auto;
				right: 100%;
			}
		}
		&.#{class('button', 'dropdown-top')}.#{class('button', 'dropdown-left')} {
			&>.#{class('menu', 'name')} {
				right: auto !important;
				left: 0 !important;
			}
		}
		&.#{class('button', 'dropdown-top')}.#{class('button', 'dropdown-right')} {
			&>.#{class('menu', 'name')} {
				right: 0 !important;
				left: auto !important;
			}
		}
		&.#{class('button', 'dropdown-top')} {
			&>.#{class('menu', 'name')} {
				bottom: 100%;
				top: auto;
				right: 0;
				left: auto;
				@include shadow(0, -2px);
			}
		}
		&.#{class('button', 'dropdown-bottom')}.#{class('button', 'dropdown-left')},
		&.#{class('button', 'dropdown-bottom')}.#{class('button', 'dropdown-right')} {
			&>.#{class('menu', 'name')} {
				top: 100%;
			}
		}
		&.#{class('button', 'dropdown-bottom')}.#{class('button', 'dropdown-left')} {
			&>.#{class('menu', 'name')} {
				right: auto !important;
				left: 0 !important;
			}
		}
		&.#{class('button', 'dropdown-bottom')}.#{class('button', 'dropdown-right')} {
			&>.#{class('menu', 'name')} {
				right: 0 !important;
				left: auto !important;
			}
		}
		// dropdown hover (default)
		&.#{class('menu', 'active')} > .#{class('menu', 'name')},
		&>.#{class('button', 'dropdown-toggle')}:focus + .#{class('menu', 'name')},
		&>.#{class('button', 'dropdown-toggle')}:hover + .#{class('menu', 'name')},
		&>.#{class('menu', 'name')}:focus,
		&>.#{class('menu', 'name')}:hover {
			display: block;
		}
		// clickable dropdown
		&.#{class('button', 'dropdown-clickable')} {
			&>.#{class('button', 'dropdown-toggle')}:hover + .#{class('menu', 'name')} {
				display: none;
			}
			&>.#{class('button', 'dropdown-toggle')}:focus + .#{class('menu', 'name')},
			&>.#{class('button', 'dropdown-toggle')}:active + .#{class('menu', 'name')} {
				display: block;
			}
		}
		///
		/// BUTTON GROUPS
		///
		@if features('elements', 'button', 'group') {
			&>.#{class('button', 'group')} {
				&>.#{class('button', 'dropdown-toggle')}:nth-last-child(2) {
					border-bottom-right-radius: elements('button', 'border-radius');
					border-top-right-radius: elements('button', 'border-radius');
				}
			}
		}
		///
		/// SIZES
		///
		@if features('elements', 'button', 'sizes') {
			@include button-sizes(true);
		}
	}
}

///
/// Button Group
///
@mixin button-group() {
	.#{class('button', 'group')} {
		display: inline-flex;
		flex-wrap: wrap;
		flex-shrink: 0;
		border-radius: elements('button', 'border-radius');
		@include shadow();
		width: fit-content;
		.#{class('button', 'name')} {
			box-shadow: none;
			&:first-child:not(:last-child) {
				border-bottom-right-radius: 0;
				border-top-right-radius: 0;
			}
			&:not(:first-child):not(:last-child) {
				border-radius: 0;
				margin-left: -#{theme('border', 'width')};
			}
			&:last-child:not(:first-child) {
				border-bottom-left-radius: 0;
				border-top-left-radius: 0;
				margin-left: -#{theme('border', 'width')};
			}
		}
		&.#{class('button', 'block')} {
			display: flex;
			width: auto;
			.#{class('button', 'name')} {
				flex: 1 0 0;
			}
		}
		///
		/// SIZES
		/// 
		@if features('elements', 'button', 'sizes') {
			@include button-sizes(true);
		}
		///
		/// STYLES
		///
		@if features('elements', 'button', 'styles') {
			@each $theme-name, $theme-color in elements('button', 'styles') {
				&.#{$theme-name} > .#{class('button', 'name')},
				&.#{$theme-name} > .#{class('button', 'dropdown')} > .#{class('button', 'name')} {
					@include button-styles($theme-color, darken($theme-color, 7%));
				}
			}
		}
		// Button Link
		@include link-button();
		///
		/// DROPDOWN
		///
		@if features('elements', 'button', 'dropdown') {
			.#{class('button', 'dropdown')}:last-child:not(:first-child),
			.#{class('button', 'dropdown')}:last-child:not(:first-child) > .#{class('button', 'name')} {
				border-bottom-left-radius: 0;
				border-top-left-radius: 0;
				margin-left: -1px;
			}
			.#{class('button', 'dropdown')}:last-child,
			.#{class('button', 'dropdown')}:last-child > .#{class('button', 'name')}:first-child,
			.#{class('button', 'dropdown')}:last-child > .#{class('button', 'name')}:last-child {
				border-bottom-right-radius: elements('button', 'border-radius');
				border-top-right-radius: elements('button', 'border-radius');
			}
			.#{class('button', 'dropdown')}:not(:first-child):not(:last-child) > .#{class('button', 'name')} {
				border-radius: 0;
				margin-left: -1px;
			}
		}
		@include breakpoints(elements('grid', 'breakpoints', 'medium'), 'max-width') {
			//button-class-group
			box-shadow: none;
		}
		///
		/// VERTICAL BUTTONS
		///
		@if features('elements', 'button', 'vertical') {
			&.#{class('button', 'vertical')} {
				flex-flow: column;
				>.#{class('button', 'name')},
				&.#{class('button', 'block')},
				&.#{class('button', 'block')} > .#{class('button', 'name')},
				&>.#{class('button', 'dropdown')} >.#{class('button', 'name')} {
					width: 100%;
				}
				>.#{class('button', 'name')} {
					border-radius: 0;
					&:last-child:not(:first-child),
					&:not(:first-child):not(:last-child) {
						margin: -#{theme('border', 'width')} 0 0;
					}
				}
				&.#{class('button', 'block')} {
					display: inline-flex;
				}
				///
				/// DROPDOWN FOR VERTICAL BUTTONS
				///
				@if features('elements', 'button', 'dropdown') {
					&>.#{class('button', 'dropdown')}:last-child:not(:first-child),
					&>.#{class('button', 'dropdown')}:last-child:not(:first-child) > .#{class('button', 'name')},
					&>.#{class('button', 'dropdown')}:not(:first-child):not(:last-child) > .#{class('button', 'name')} {
						margin: -#{theme('border', 'width')} 0 0;
						border-radius: 0;
					}
				}
				///
				/// STYLES
				///
				@if features('elements', 'button', 'styles') {
					@each $theme-name, $theme-color in elements('button', 'styles') {
						&>.#{$theme-name}.#{class('button', 'name')},
						&>.#{class('button', 'dropdown')} > .#{$theme-name}.#{class('button', 'name')} {
							border: theme('border', 'width') solid darken($theme-color, 6%);
						}
					}
				}
			}
		}
	}
}

///
/// Button Styles
/// @param {Color} $bg-color
/// @param {Color} $border-color
/// @param {Boolean} $outlined
///
@mixin button-styles(
	$bg-color: theme('color', 'primary'),
	$border-color: null,
	$outlined : false
) {
	///
	/// OUTLINED STYLE
	///
	@if $outlined {
		$textcolor: if(theme('type') == 'dark', white, $bg-color);
		background: transparent;
		color: $textcolor;
		i, [class^="#{class('icon', 'class-name')}"] {
			color: $textcolor;
		}
	} @else {
		background: $bg-color;
		color: white;
		i, [class^="#{class('icon', 'class-name')}"] {
			color: white;
		}
	}
	text-shadow: 0 1px 1px darken($bg-color, 6%);
	border: theme('border', 'width') theme('border', 'style') $border-color;
	&:hover {
		background: lighten($bg-color, 7.5%);
		color: white;
		i, [class^="#{class('icon', 'class-name')}"] {
			color: white;
		}
	}
	&:active,
	&.#{class('button', 'active')} {
		background: lighten($bg-color, 7.5%);
		color: white;
		&:focus,
		&:hover {
			background: lighten($bg-color, 12.5%);
		}
	}

	///
	/// GRADIENT
	/// Gradient is not for outlined style
	///
	@if $outlined != true {
		@if features('elements', 'button', 'gradient') {
			&.#{class('button', 'gradient')} {
				background: $bg-color;
				z-index: 1;
				position: relative;
				@include set-gradient($bg-color, to top);
				&:before {
					content: "";
					position: absolute;
					top: 0;
					left: 0;
					width: 100%;
					height: 100%;
					@include set-gradient($bg-color, to bottom, 23%);
					opacity: 0;
					transition: opacity 0.25s;
					z-index: -1;
				}
				&:hover::before {
					opacity: 1;
				}
				&:active::before,
				&:focus::before {
					background: $bg-color;
					@include set-gradient($bg-color, to bottom, 27%);
				}
			}
			/// Gradient Left-To-Right
			&.#{class('button', 'gradient')}#{'-ltr'} {
				background: linear-gradient(125deg, lighten($bg-color, 21%), darken($bg-color, 5%));
			}
			/// Gradient Right-To-Left
			&.#{class('button', 'gradient')}#{'-rtl'} {
				background: linear-gradient(-125deg, lighten($bg-color, 21%), darken($bg-color, 5%));
			}
			&.#{class('button', 'gradient')}#{'-ltr'},
			&.#{class('button', 'gradient')}#{'-rtl'} {
				z-index: 1;
				position: relative;
				&:before {
					position: absolute;
					content: "";
					width: 100%;
					height: 100%;
					top: 0;
					left: 0;
					opacity: 0;
					transition: opacity 0.25s;
					z-index: -1;
					background: linear-gradient(0deg, lighten($bg-color, 21%), darken($bg-color, 2%));
				}
				&:hover::before {
					opacity: 1;
				}
				&:active::before,
				&:focus::before {
					background: linear-gradient(0deg, lighten($bg-color, 25%), $bg-color);
				}
			}
		}
	}
	@content;
}

///
/// Button Sizes
/// @param {Boolean} $class-name
///
@mixin button-sizes($class-name: false) {
	@each $name, $font-size, $padding in elements('button', 'sizes') {
		@if $class-name {
			&.#{$name} > .#{class('button', 'name')},
			&.#{$name} > .#{class('button', 'dropdown')} > .#{class('button', 'name')} {
				font-size: $font-size;
				padding: $padding;
			}
		} @else {
			&.#{$name} {
				font-size: $font-size;
				padding: $padding;
			}
		}
	}
}

///
/// Link Button
///
@mixin link-button() {
	&.#{class('button', 'link')}.#{class('button', 'name')},
	&.#{class('tooltip', 'top')} > .#{class('button', 'name')} {
		@include button-styles(transparent) {
			box-shadow: none;
			border: none;
			color: theme('color', 'primary');
			text-decoration: underline;
			font-weight: theme('typography', 'font-weight');
			&:hover {
				color: theme('color', 'text');
			}
			i, [class^="#{class('icon', 'class-name')}"] {
				color: theme('color', 'text');
			}
		};
	}
}
