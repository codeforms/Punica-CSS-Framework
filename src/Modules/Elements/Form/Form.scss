///
/// Punica CSS Framework
/// Elements : Form
///

@use "../../../Core/Global/Getters" as *;
@use "../../../Core/Global/Options" as *;
@use "../../../Core/Global/Mixins" as *;
@use "../../../Core/Global/Colors" as color;
@use "../../../Core/Theme/Getters" as *;
@use "mixins";

@if enabled('elements', 'form') {
	@include mixins.form-inputs() {
		font-family     : elements('form', 'input', 'font-family');
		box-sizing      : elements('form', 'input', 'box-sizing');
		background-color: elements('form', 'input', 'background-color');
		border-width    : elements('form', 'input', 'border-width');
		border-style    : elements('form', 'input', 'border-style');
		border-color    : elements('form', 'input', 'border-color');
		height          : elements('form', 'input', 'height');
		border-radius   : elements('form', 'input', 'border-radius');
		outline         : elements('form', 'input', 'outline-width') solid transparent;
		outline-color   : elements('form', 'input', 'outline-color');
		outline-offset  : -#{elements('form', 'input', 'outline-width')};
		box-shadow      : elements('form', 'input', 'box-shadow');
		padding         : elements('form', 'input', 'padding');
		width           : elements('form', 'input', 'width');
		max-width       : elements('form', 'input', 'max-width');
		color           : elements('form', 'input', 'color');
		font-size       : elements('form', 'input', 'font-size');
		font-weight     : elements('form', 'input', 'font-weight');
		transition      : elements('form', 'input', 'transition');
		&:focus {
			outline-color   : elements('form', 'input', 'focus', 'outline-color');
			outline-width   : elements('form', 'input', 'focus', 'outline-width');
			outline-offset  : -#{elements('form', 'input', 'focus', 'outline-width')};
			background-color: elements('form', 'input', 'focus', 'background-color');
			color           : elements('form', 'input', 'focus', 'color');
			z-index         : 0;
		}
		&::placeholder {
			color: components('form', 'input', 'placeholder', 'color');
		}
		///
		/// VALIDATION STYLES
		///
		@if features('elements', 'form', 'validation-styles') {
			@each $style-name, $style-color in elements('form', 'styles') {
				&.#{$style-name} {
					color       : $style-color;
					border-color: $style-color;
					border-width: theme('border', 'width');
					&:focus {
						outline-color: $style-color;
					}
				}
			}
		}
	};
	textarea {
		min-height: elements('form', 'textarea', 'min-height');
		resize    : elements('form', 'textarea', 'resize');
	}
	fieldset {
		border-width: elements('form', 'fieldset', 'border-width');
		padding     : elements('form', 'fieldset', 'padding');
	}
	legend {
		display      : elements('form', 'legend', 'display');
		font-size    : elements('form', 'legend', 'font-size');
		font-weight  : elements('form', 'legend', 'font-weight');
		margin-bottom: elements('form', 'legend', 'margin-bottom');
		white-space  : elements('form', 'legend', 'white-space');
	}
	input:disabled {
	  opacity: .59;
	}
	.#{class('form', 'name')} {
		position : relative;
		max-width: 100%;
		padding  : elements('form', 'padding');
		.#{class('form', 'item')} {
			height     : elements('form', 'item', 'height');
			margin     : elements('form', 'item', 'margin-y') elements('form', 'item', 'margin-x');
			display    : elements('form', 'item', 'display');
			flex-wrap  : elements('form', 'item', 'flex-wrap');
			width      : elements('form', 'item', 'width');
			max-width  : elements('form', 'item', 'max-width');
			position   : elements('form', 'item', 'position');
			align-items: elements('form', 'item', 'align-items');
			padding    : elements('form', 'item', 'padding');
			@at-root .#{class('form', 'name')} label,
			&>label {
				margin        : elements('form', 'label', 'margin');
				color         : elements('form', 'label', 'color');
				font-size     : elements('form', 'label', 'font-size');
				font-weight   : elements('form', 'label', 'font-weight');
				text-transform: elements('form', 'label', 'text-transform');
				height        : elements('form', 'label', 'height');
			}
			&>small {
				color: elements('form', 'small', 'color');
			}
			///
			/// Custom file input
			///
			@if features('elements', 'form', 'upload') {
				> input[type="file"] {
					opacity : 0;
					position: absolute;
					top     : 0;
					left    : 0;
					height  : 100%;
					cursor  : default;
				}
			}
			///
			/// FORM GROUPS
			///
			@if features('elements', 'form', 'group') {
				@at-root .#{class('form', 'name')} .#{class('form', 'group')},
				&>.#{class('form', 'group')} {
					display: flex;
					width  : 100%;
					>* {
						flex: 1 1 auto;
						&:last-child {
			    			margin-left: if(elements('form', 'input', 'border-width') != 0 , -1px , .5rem);
						}
						&:not(:first-child):not(:last-child) {
							margin-left  : if(elements('form', 'input', 'border-width') != 0 , -1px , .5rem);
							margin-right : 0;
							border-radius: 0;
						}
					}
					>.#{class('button', 'group')} {
						box-shadow: none;
					}
					>.#{class('button', 'name')} {
						padding   : elements('form', 'input', 'padding');
						box-shadow: none;
						&:first-child {
							border-bottom-right-radius: 0;
							border-top-right-radius   : 0;
						}
						&:last-child:not(:first-child) {
							border-bottom-left-radius: 0;
							border-top-left-radius   : 0;
						}
					}
					@include mixins.form-inputs() {
						box-shadow: none !important;
						&:first-child {
							border-bottom-right-radius: 0;
							border-top-right-radius   : 0;
						}
						&:last-child:not(:first-child) {
							border-bottom-left-radius: 0;
							border-top-left-radius   : 0;
						}
					}
				}
			}
		}
		.#{class('form', 'items')} {
			margin   : elements('form', 'items', 'margin');
			display  : flex;
			flex-wrap: wrap;
		}
		@each $name, $number in elements('form', 'columns') {
			.#{$name}.#{class('form', 'items')} {
				>.#{class('form', 'item')} {
					flex: 0 0 calc(100% * (1 / #{$number}) - (2 * #{elements('form', 'item', 'margin-x')}));
				}
			}
			@include breakpoints(elements('grid', 'breakpoints', 'medium'), 'max-width') {
				.#{$name}.#{class('form', 'items')} {
					>.#{class('form', 'item')} {
						flex: 0 0 100%;
					}
				}
			}
		}
		///
		/// INPUT SIZES
		///
		@if features('elements', 'form', 'sizes') {
			@each $size-name, $font-size, $input-height, $button-padding in elements('form', 'sizes') {
				&.#{$size-name} {
					@include mixins.form-inputs() {
						height   : $input-height;
						font-size: $font-size;
					}
					.#{class('button', 'name')} {
						height   : $input-height !important;
						font-size: $font-size !important;
						padding  : $button-padding !important;
					}
					@at-root .#{class('form', 'name')}.#{$size-name} label,
					&>.#{class('form', 'items')}>.#{class('form', 'item')}>label,
					&>.#{class('form', 'item')}>label {
						font-size: $font-size;
					}
				}
			}
		}
	}
	///
	/// CHECKBOX & RADIO
	///
	@if features('elements', 'form', 'checkbox-radio') {
		.#{class('form', 'radio')},
		.#{class('form', 'checkbox')} {
			display              : elements('form', 'radio-checkbox', 'display');
			grid-template-columns: elements('form', 'radio-checkbox', 'grid-template-columns');
			gap                  : elements('form', 'radio-checkbox', 'gap');
			input {
				display      : elements('form', 'radio-checkbox', 'display');
				place-content: elements('form', 'radio-checkbox', 'place-content');
				margin       : elements('form', 'radio-checkbox', 'margin');
				width        : elements('form', 'radio-checkbox', 'width');
				height       : elements('form', 'radio-checkbox', 'height');
				accent-color : elements('form', 'radio-checkbox', 'accent-color');
				&:disabled {
				  cursor: not-allowed;
				}
			}
			&>label {
				font-weight: normal;
				user-select: none;
			}
		}
	}
}
