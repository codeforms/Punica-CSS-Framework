///
/// Punica CSS Framework
/// Components : Tabnav
///

@use "../../../Core/Global/Getters" as *;
@use "../../../Core/Global/Options" as *;
@use "../../../Core/Global/Mixins" as *;
@use "../../../Core/Global/Colors" as color;
@use "../../../Core/Theme/Getters" as *;
@use "../../../Core/Theme/Setters" as *;
@use "mixins";

@if enabled('components', 'tabnav') {
	.#{class('tabnav', 'name')} {
		position     : relative;
		display      : flex;
		flex-wrap    : wrap;
		align-items  : flex-end;
		border-bottom: components('tabnav', 'border-width') theme('border', 'style') theme('border', 'color');
		padding      : 0;
		&>.#{class('button', 'group')} {
			box-shadow   : none;
			border-radius: 0;
		}
		/// Default button styles in Tabnav
		@include mixins.tab-buttons() {
			border       : none;
			box-shadow   : none;
			background   : transparent;
			border-radius: 0 !important;
			line-height  : components('tabnav', 'line-height');
			font-size    : components('tabnav', 'font-size');
			font-weight  : components('tabnav', 'font-weight');
			color        : components('tabnav', 'color');
			padding      : components('tabnav', 'padding');
			border-bottom: components('tabnav', 'border-width') solid transparent;
			margin-bottom: -#{components('tabnav', 'border-width')};
			&:hover {
				color: theme('color', 'text');
				@if theme('type') == 'light' {
					border-bottom-color: darken(color.$grey, 35%);
				} @else if theme('type') == 'dark' {
					border-bottom-color: lighten(color.$grey, 35%);
				}
			}
			&:hover,
			&:focus {
				background: transparent;
			}
			&.#{class('tabnav', 'active')} {
				border-bottom-color: theme('color', 'primary');
				i {
					color: inherit;
				}
			}
			i {
				font-size: components('button', 'icon', 'font-size');
			}
		}
		///
		/// SIZES
		///
		@if features('components', 'tabnav', 'sizes') {
			@each $size-name, $font-size, $padding, $weight in components('tabnav', 'sizes') {
				&.#{$size-name} {
					@include mixins.tab-buttons() {
						font-size  : $font-size;
						padding    : $padding;
						font-weight: $weight;
					}
				}
			} 
		}
		/// Bottom Tabnav
		@if features('components', 'tabnav', 'bottom') {
			&.#{class('tabnav', 'bottom')} {
				border-bottom: 0;
				border-top   : components('tabnav', 'border-width') theme('border', 'style') color.$grey;
				@include mixins.tab-buttons() {
					margin-top   : -#{components('tabnav', 'border-width')};
					border-top   : components('tabnav', 'border-width') solid transparent;
					border-bottom: 0;
					margin-bottom: 0; 
					&:hover {
						@if theme('type') == 'light' {
							border-top-color: darken(color.$grey, 30%);
						} @else if theme('type') == 'dark' {
							border-top-color: lighten(color.$grey, 30%);
						}
					}
					&.#{class('tabnav', 'active')} {
						border-top-color: theme('color', 'primary');
					}
				}
			}
		}
		///
		/// STYLES
		///
		@if features('components', 'tabnav', 'styles') {
			@each $type-name, $color in components('tabnav', 'styles') {
				&.#{$type-name} {
					.#{class('button', 'name')},
					a.#{class('button', 'name')},
					.#{class('button', 'dropdown')} .#{class('button', 'name')},
					.#{class('button', 'dropdown')} a.#{class('button', 'name')} {
						&.#{class('tabnav', 'active')} {
							border-bottom-color: $color;
						}
					}
				}
				/// Bottom Tabnav
				@if features('components', 'tabnav', 'bottom') {
					&.#{$type-name}.#{class('tabnav', 'bottom')} {
						.#{class('button', 'name')},
						a.#{class('button', 'name')},
						.#{class('button', 'dropdown')} .#{class('button', 'name')},
						.#{class('button', 'dropdown')} a.#{class('button', 'name')} {
							&.#{class('tabnav', 'active')} {
								border-top-color: $color;
							}
						}
					}
				}
			}
		}
        &.#{class('tabnav', 'centered')} {
            justify-content: center;
        }
	}
}
