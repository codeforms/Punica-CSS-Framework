///
/// Punica CSS Framework
/// Components : List
///

@use "../../../Core/Global/Getters" as *;
@use "../../../Core/Global/Options" as *;
@use "../../../Core/Global/Sass" as *;
@use "../../../Core/Global/Mixins" as *;
@use "../../../Core/Global/Colors" as color;
@use "../../../Core/Theme/Getters" as *;
@use "../../../Core/Theme/Setters" as *;

@if enabled('components', 'list') {
	.#{class('list', 'name')} {
		list-style: none;
		margin    : components('list', 'margin');
		>.#{class('list', 'item')} {
			display    : flex;
			align-items: center;
			padding    : components('list', 'item', 'padding');
			margin     : components('list', 'item', 'margin');
			transition : components('list', 'item', 'transition');
		    >img,
		    >i {
		    	margin-right: components('list', 'media', 'margin-right');
		    }
		    &>span,
		    &>div {
		    	/// ..children of a flex container are
		    	/// forced to have a block-flavored display type.
		    	display: contents;
		    }
		    >.#{class('list', 'body')} {
				display    : initial;
				flex       : 1;
				line-height: components('list', 'body', 'line-height');
				text-align : components('list', 'body', 'text-align');
		    	>.#{class('list', 'title')},
		    	>.#{class('list', 'subtitle')} {
					display: block;
				}
		    	>.#{class('list', 'title')} {
					font-size  : components('list', 'title', 'font-size');
					font-weight: components('list', 'title', 'font-weight');
					line-height: components('list', 'title', 'line-height');
		    	}
				>.#{class('list', 'subtitle')} {
					font-size    : components('list', 'subtitle', 'font-size');
					font-weight  : components('list', 'subtitle', 'font-weight');
					margin-bottom: components('list', 'subtitle', 'margin-bottom');
					@if theme('type') == 'light' {
						color: darken(color.$grey, 20%);
					} @else if theme('type') == 'dark' {
						color: lighten(color.$grey, 20%);
					}
				}
		    }
		    >.#{class('list', 'actions')} {
				width      : components('list', 'actions', 'width');
				margin-left: components('list', 'actions', 'margin-left');
			}
			&.#{class('list', 'active')} {
				background: color.$grey;
			}
		}
		///
		/// DIVIDED
		///
		@if features('components', 'list', 'divided') {
			&.#{class('list', 'divided')} {
				>.#{class('list', 'item')} {
					border-bottom: set-border();
					&:last-child {
						border-bottom: none;
					}
				}
			}
		}
		///
		/// STRIPED
		///
		@if features('components', 'list', 'striped') {
			&.#{class('list', 'striped')} {
				>.#{class('list', 'item')} {
					&:nth-of-type(odd) {
						background: color.$grey;
					}
				}
			}
		}
		///
		/// HOVERED
		///
		@if features('components', 'list', 'hovered') {
			&.#{class('list', 'hovered')} {
				>.#{class('list', 'item')} {
					&:hover {
						background: color.$grey;
						transition: components('list', 'item', 'transition');
					}
				}
			}
		}
	}
}
