///
/// Punica CSS Framework
/// Utilities : Helpers -> Mixins
///

@use "../../Core/Global/Getters" as *;
@use "../../Core/Theme/Getters" as *;
@use "../../Core/Theme/Setters" as *;

/// 
/// Set default helpers
/// 
/// @param {Array|List} $helper
/// @param {Bool} $two
/// @param {Bool} $three
/// 
/// @return mixed
/// 
@mixin set_utils($helper, $two: false, $three: false)
{
	$list       : utils($helper);
	$name       : map-get($list, 'name');
	$prefix     : map-get($list, 'prefix');
	$specificity: map-get($list, 'specificity');
	$type       : map-get($list, 'type');
	$values     : map-get($list, 'values');

	@if $two {
		// suffix / value
		@each $suffix, $value in $values {
			.#{$prefix}#{$suffix} {
				#{$name}: #{$value}#{$type} #{$specificity};
			}
		}
	} @else if $three {
		// suffix / css property / value
		@each $suffix, $property, $value in $values {
			.#{$prefix}#{$suffix} {
				#{$property}: #{$value}#{$type} #{$specificity};
			}
		}
	} @else {
		@each $value in $values {
			.#{$prefix}#{$value} {
				#{$name}: #{$value}#{$type} #{$specificity};
			}
		}
	}
}

///
/// Set helper list with specs
/// 
/// @param {Array|List} $helpers
/// 
/// @return mixed
///
@mixin utils_with_specs($helpers)
{
	$name       : map-get($helpers, 'name');
	$prefix     : map-get($helpers, 'prefix');
	$specificity: map-get($helpers, 'specificity');
	$type       : map-get($helpers, 'type');
	$specs      : map-get($helpers, 'specs');
	$values     : map-get($helpers, 'values');
	$sizes      : map-get($helpers, 'sizes');

	@each $suffix, $property in $values {
		@each $spec, $value in $specs {
			.#{$prefix}#{$suffix}#{$spec} {
				#{$property}: #{$value}#{$type} #{$specificity};
			}
		}
	}
}

///
/// Set Color Palette
/// Color Palette of text and background
/// 
/// @param {Array|List} $colors
/// 
/// @return mixed
///
@mixin color_palette($colors) 
{
	$name       : map-get($colors, 'name');
	$prefix     : map-get($colors, 'prefix');
	$specificity: map-get($colors, 'specificity');
	$type       : map-get($colors, 'type');
	$specs      : map-get($colors, 'specs');
	$values     : map-get($colors, 'values');
	$sizes      : map-get($colors, 'sizes');

	@for $i from 5 through 35 {
		@each $class, $color in $values {
			@if $i % 5 == 0 {
				$percentage: $i*1%;
				.#{$prefix}#{$class}-darken-#{$i} {
					#{$name}: mix(black, $color, $percentage) !important;
				}
				.#{$prefix}#{$class}-lighten-#{$i} {
					#{$name}: mix(white, $color, $percentage) !important;
				}
			}
		}
	}
}

///
/// Horizontal or vertical border sides
/// 
/// @param {Array|List} $borders
/// 
/// @return mixed
/// 
@mixin set_border_sides($borders) {
	@each $class, $border in $borders {
		.border-x-#{$class} {
			border-left-width: #{$border}px !important;
			border-right-width: #{$border}px !important;
		}
		.border-y-#{$class} {
			border-top-width: #{$border}px !important;
			border-bottom-width: #{$border}px !important;
		}
	}
}

///
/// Other Helpers
///
@mixin other_helpers() {
	.centered {margin: 0 auto;}
	.align.right {text-align: right !important;}
	.align.left {text-align: left !important;}
	.align.center {text-align: center !important;}
	.align.justify {text-align: justify !important;}
	.float.right {float: right;}
	.float.left {float: left;}
	.full.width {
		width: 100%;
		max-width: 100%;
		min-width: 100%;
	}
	.full.height {
		height: 100%;
		min-height: 100%;
		max-height: 100%;
	}
	.vh-100 {
		height: 100vh;
	}
	.vw-100 {
		width: 100vw;
	}
	.ungap {
		gap: 0;
	}
	.fade {opacity: 0;}
	/* seperator for flex */
	.spacer {
		flex-grow: 1!important;
		outline: none;
	}
	.avatar {
	    display: inline-block;
	    border-radius: 50%;
	}
	.reset {
		padding: 0 !important;
		margin : 0 !important;
	}
	.reverse {
		transform: rotateY(180deg);
		unicode-bidi: bidi-override;
		direction: rtl;
	}
	.truncate {
		display: block;
		white-space: nowrap;
		overflow: hidden;
		text-overflow: ellipsis;
	}
	.transparent {background: transparent !important;}
	.pure, .pure > div {
		background: transparent !important; 
		border: none; 
		box-shadow: none !important
	}
	.bordered {@include border();} 
	.borderless {border: none !important;}
	.rounded {border-radius: theme('border', 'radius');}
	.radiusless {border-radius:0 !important;}
	.shadowed {@include shadow();}
	.shadowless {box-shadow:none !important;}
	.inset-0 {
		top: 0;
		right: 0;
		bottom: 0;
		left: 0;
	}
	.inset-auto {
		top: auto;
		right: auto;
		bottom: auto;
		left: auto;
	}
	.clearfix:after {
		clear: both;
		content: ' ';
		display: table;
	}
}