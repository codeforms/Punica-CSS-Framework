///
/// Punica CSS Framework
/// Utilities : Helpers -> Mixins
///

@use "sass:map" as map;
@use "sass:color" as *;
@use "../../Core/Global/Getters" as *;
@use "../../Core/Theme/Getters" as *;
@use "../../Core/Theme/Setters" as *;

/// 
/// Set default helpers
/// 
/// @param {Array|List} $helper : key name in the index.scss file
/// @param {Bool} $two : if two variables in the map
/// @param {Bool} $three : if three variables in the map
/// 
/// @return mixed
/// 
@mixin set_utils($helper, $two: false, $three: false)
{
	$enabled    : utils($helper, 'enabled');
	$property   : utils($helper, 'property');
	$prefix     : utils($helper, 'prefix');
	$specificity: utils($helper, 'specificity');
	$unit       : utils($helper, 'unit');
	$variables  : utils($helper, 'variables');

	@if $enabled {
		@if $two {
			// suffix / value
			@each $suffix, $value in $variables {
				.#{$prefix}#{$suffix} {
					#{$property}: #{$value}#{$unit} $specificity;
				}
			}
		} @else if $three {
			// suffix / css property / value
			@each $suffix, $prop, $value in $variables {
				.#{$prefix}#{$suffix} {
					#{$prop}: #{$value}#{$unit} $specificity;
				}
			}
		} @else {
			@each $value in $variables {
				.#{$prefix}#{$value} {
					#{$property}: #{$value}#{$unit} $specificity;
				}
			}
		}
	}
}

/// 
/// @param {Array|List} $helper
/// 
/// @return mixed
/// 
@mixin set_inset_helper($helper)
{
	$enabled    : utils($helper, 'enabled');
	$list       : utils($helper, 'variables');
	$specificity: utils($helper, 'specificity');

	@if $enabled {
		@each $class, $variables in $list {
			@each $value in $variables {
				.#{$class}-#{$value} {
					#{$class}: #{$value} $specificity;
				}
			}
		}
	}
}

///
/// Set helper list with args
/// 
/// @param {Array|List} $helpers
/// 
/// @return mixed
///
@mixin utils_with_args($helpers)
{
	$enabled    : map.get($helpers, 'enabled');
	$prefix     : map.get($helpers, 'prefix');
	$specificity: map.get($helpers, 'specificity');
	$unit       : map.get($helpers, 'unit');
	$args       : map.get($helpers, 'args');
	$variables  : map.get($helpers, 'variables');

	@if $enabled {
		@each $infix, $property in $variables {
			@each $suffix, $value in $args {
				.#{$prefix}#{$infix}#{$suffix} {
					#{$property}: #{$value}#{$unit} $specificity;
				}
			}
		}
	}
}

///
/// Set Color Palette
/// Color Palette of text and background
/// 
/// @param {Array|List} $colors
/// 
/// @return mixed
///
@mixin color_palette($colors) 
{
	$enabled    : map.get($colors, 'enabled');
	$property   : map.get($colors, 'property');
	$prefix     : map.get($colors, 'prefix');
	$specificity: map.get($colors, 'specificity');
	$variables  : map.get($colors, 'variables');
	$shade-step : map.get(map.get($colors, 'palette'), 'shade-step');
	$max-range  : map.get(map.get($colors, 'palette'), 'max-range');

	@if $enabled {
		@for $i from $shade-step through $max-range {
			@each $suffix, $color in $variables {
				// if the remainder of an integer
				// division of $i by $shade-step is zero
				@if $i % $shade-step == 0 {
					$percentage: $i*1%; // convert remainder to percentage
					@if($color != black) {
						.#{$prefix}#{$suffix}-darken-#{$i} {
							#{$property}: mix(black, $color, $percentage) $specificity;
						}
					}
					@if($color != white) {
						.#{$prefix}#{$suffix}-lighten-#{$i} {
							#{$property}: mix(white, $color, $percentage) $specificity;
						}
					}
				}
			}
		}
	}
}

///
/// Horizontal or vertical border sides
/// 
/// @param {Array|List} $borders
/// 
/// @return mixed
/// 
@mixin set_border_sides()
{
	$enabled: utils('border', 'enabled');
	$borders: utils('border', 'args');
	$unit   : utils('border', 'unit');
	$prefix : utils('border', 'prefix');

	@if $enabled {
		@each $suffix, $border in $borders {
			.#{$prefix}-x-#{$suffix} {
				border-left-width: #{$border}#{$unit} !important;
				border-right-width: #{$border}#{$unit} !important;
			}
			.#{$prefix}-y-#{$suffix} {
				border-top-width: #{$border}#{$unit} !important;
				border-bottom-width: #{$border}#{$unit} !important;
			}
		}
	}
}

///
/// Set horizontal/vertical side of an element
/// [Used for margin and padding]
/// 
/// @param {Array|List} $util
/// @param {String} $side
/// 
/// @example px-30 / py-20
/// @example my-70 / mx-10
/// 
/// @return mixed
/// 
@mixin set_sides($util, $side: 'margin') 
{
	$enabled: map.get($util, 'enabled');
	$prefix : map.get($util, 'prefix');
	$unit   : map.get($util, 'unit');
	$args   : map.get($util, 'args');

	@if $enabled {
		@each $suffix, $value in $args {
			.#{$prefix}x-#{$suffix} {
				#{$side}-left: #{$value}#{$unit} !important;
				#{$side}-right: #{$value}#{$unit} !important;
			}
			.#{$prefix}y-#{$suffix} {
				#{$side}-top: #{$value}#{$unit} !important;
				#{$side}-bottom: #{$value}#{$unit} !important;
			}
		}
	}
}

///
/// Other Helpers
///
@mixin other_helpers() {
	.centered {margin: 0 auto;}
	.align.right {text-align: right !important;}
	.align.left {text-align: left !important;}
	.align.center {text-align: center !important;}
	.align.justify {text-align: justify !important;}
	.float.right {float: right;}
	.float.left {float: left;}
	.full.width {
		width: 100%;
		max-width: 100%;
		min-width: 100%;
	}
	.full.height {
		height: 100%;
		min-height: 100%;
		max-height: 100%;
	}
	.vh-100 {
		height: 100vh;
	}
	.vw-100 {
		width: 100vw;
	}
	.fade {opacity: 0;}
	/* seperator for flex */
	.spacer {
		flex-grow: 1!important;
		outline: none;
	}
	.avatar {
	    display: inline-block;
	    border-radius: 50%;
	}
	.reset {
		padding: 0 !important;
		margin : 0 !important;
	}
	.reverse {
		transform: rotateY(180deg);
		unicode-bidi: bidi-override;
		direction: rtl;
	}
	.truncate {
		display: block;
		white-space: nowrap;
		overflow: hidden;
		text-overflow: ellipsis;
	}
	.transparent {background: transparent !important;}
	.pure, .pure > div {
		background: transparent !important; 
		border: none; 
		box-shadow: none !important
	}
	.bordered {@include border();} 
	.borderless {border: none !important;}
	.rounded {border-radius: theme('border', 'radius');}
	.radiusless {border-radius:0 !important;}
	.shadowed {box-shadow: theme('shadow')!important;}
	.shadowless {box-shadow:none !important;}
	.inset-0 {
		top: 0;
		right: 0;
		bottom: 0;
		left: 0;
	}
	.inset-auto {
		top: auto;
		right: auto;
		bottom: auto;
		left: auto;
	}
	.clearfix:after {
		clear: both;
		content: ' ';
		display: table;
	}
}