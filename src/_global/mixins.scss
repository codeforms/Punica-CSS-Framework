/////////////////////////////////////////////////////////
/// GLOBAL MIXINS
/////////////////////////////////////////////////////////

///
/// Breakpoints
/// @param {Size} $size
/// @param {Size} $width
///
@mixin breakpoints(
	$size, $width: 'min-width'
) {
	@media only screen and ($width: $size) {
		@content;
	}
}

///
/// Get options value by key
///
/// @param {String} $node
/// @param {String(s)} $keys
///
/// @example options('grid', 'enable')
/// @example options('grid', 'features', 'equal')
///
/// @return boolean
///
@function options($keys...) {
	@if null == map-get($options, nth($keys, 1)) {
		$warn: '[ INVALID KEY ] : "#{nth($keys, 1)}" key is not found in the options.scss';
		@warn $warn; @error $warn;
	}

	$value: map-get($options, nth($keys, 1));

	@if length($keys) == 1 {
		@return $value;
	}

	$value: map-get($value, nth($keys, 2));

	@if null == $value {
		$warn: '[ INVALID KEY ] : "#{nth($keys, 1)} > #{nth($keys, 2)}" key is not found in the options.scss';
		@warn $warn; @error $warn;
	}

	@if length($keys) > 2 {
		$value: map-get($value, nth($keys, 3));
		@if null == $value {
			$warn: '[ INVALID KEY ] : "#{nth($keys, 1)} > #{nth($keys, 2)} > #{nth($keys, 3)}" key is not found in the options.scss';
			@warn $warn; @error $warn;
		}
	}

	@return $value;
}

///
/// Get component/element variables from options
///
/// @param {String} $node
/// @param {String} $key(s)
///
/// @example variables('grid', 'gap')
/// @example variables('grid', 'columns', 'size')
///
/// @return mixed
///
@function variables($node, $keys...) {
	$warning: '[ INVALID KEY ] : ';
	$text: 'key is not found in the options.scss';
	$variables: map-get(map-get(options($node), 'variables'), nth($keys, 1));

	@if null == $variables {
		$warn: $warning + '"#{$node} > #{nth($keys, 1)}" #{$text}.';
		@warn $warn; @error $warn;
	}
	
	@if length($keys) == 1 {
		@return $variables;
	}

	@if null == map-get($variables, nth($keys, 2)) {
		$warn: $warning + '"#{$node} > #{nth($keys, 1)} > #{nth($keys, 2)}" #{$text}.';
		@warn $warn; @error $warn;
	}

	@return map-get($variables, nth($keys, 2));
}

///
/// Get class name
///
/// @param {String} $node
/// @param {String} $key
///
/// @example class('alert', 'name')
/// @example class('button', 'dropdown')
///
/// @return string
///
@function class($node, $key) {
	$warning: '[ INVALID KEY ] : ';
	$text: 'key is not found in the classnames.scss';

	@if null == map-get($classnames, $node) {
		$warn: $warning + '"#{$node}" #{$text}.';
		@warn $warn; @error $warn;
	}

	$classnames: map-get($classnames, $node);

	@if null == map-get($classnames, $key) {
		$warn: '"#{$node} > #{$key}" #{$text}.';
		@warn $warning + $warn;	@error $warning + $warn;
	}

	@return map-get($classnames, $key);
}

///
/// Media Group Specs
/// @param {String} $item-name
/// @param {Size} $padding
///
@mixin media-group-specs(
	$item-name, $padding: 1px
) {
	@each $name, $number in $grids {
		&>.#{$item-name}.#{$name} {
			padding-bottom: initial !important;
			height: auto;
			&>div, &>a {
				flex: 0 0 calc(100% * (1 / #{$number}));
				flex-grow: 1;
				padding: $padding;
			}
		}
	}
}

///
/// Reference;
/// https://css-tricks.com/fluid-width-video/
///
@mixin embedded-media {
	position: relative;
	padding-bottom: 56.25% !important;
	height: 0;
	overflow: hidden;
	max-width: 100%;
    width: 100%;
    box-sizing: border-box;
	iframe,
	object,
	embed {
		position: absolute;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
	}
	video {
		max-width: 100%;
		height: auto;
		box-sizing: border-box;
	}
}