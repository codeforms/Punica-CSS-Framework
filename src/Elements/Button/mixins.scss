///
/// Punica CSS Framework
/// Elements : Button -> Mixins
///

@use "../../_global/_getters" as *;
@use "../../_global/mixins" as *;
@use "../../_themes/_setters" as *;
@use "../../_themes/_getters" as *;
@use "variables";

///
/// Dropdown
///
@mixin dropdown() {
	.#{class('button', 'dropdown')} {
		display: inline-block;
		position: relative;
		&>.#{class('menu', 'name')} {
			animation: slide-down .15s ease 1;
			display: none;
			left: 0;
			max-height: 45vh;
			overflow-y: auto;
			position: absolute;
			top: 100%;
			z-index: 300 + 1; // menu z-index + 1
			width: auto;
			&>.#{class('menu', 'item')} {
				& > a {
					padding: .1rem .9rem;
				}
			}
		}
		&.#{class('button', 'dropdown-right')},
		&.#{class('button', 'dropdown-left')} {
			&>.#{class('menu', 'name')} {
				top: 0;
			}
		}
		&.#{class('button', 'dropdown-right')} {
			&>.#{class('menu', 'name')} {
				left: 100%;
				right: auto;
			}
		}
		&.#{class('button', 'dropdown-left')} {
			&>.#{class('menu', 'name')} {
				left: auto;
				right: 100%;
			}
		}
		&.#{class('button', 'dropdown-top')}.#{class('button', 'dropdown-left')} {
			&>.#{class('menu', 'name')} {
				right: auto !important;
				left: 0 !important;
			}
		}
		&.#{class('button', 'dropdown-top')}.#{class('button', 'dropdown-right')} {
			&>.#{class('menu', 'name')} {
				right: 0 !important;
				left: auto !important;
			}
		}
		&.#{class('button', 'dropdown-top')} {
			&>.#{class('menu', 'name')} {
				bottom: 100%;
				top: auto;
				right: 0;
				left: auto;
				@include shadow(0, -2px);
			}
		}
		&.#{class('button', 'dropdown-bottom')}.#{class('button', 'dropdown-left')},
		&.#{class('button', 'dropdown-bottom')}.#{class('button', 'dropdown-right')} {
			&>.#{class('menu', 'name')} {
				top: 100%;
			}
		}
		&.#{class('button', 'dropdown-bottom')}.#{class('button', 'dropdown-left')} {
			&>.#{class('menu', 'name')} {
				right: auto !important;
				left: 0 !important;
			}
		}
		&.#{class('button', 'dropdown-bottom')}.#{class('button', 'dropdown-right')} {
			&>.#{class('menu', 'name')} {
				right: 0 !important;
				left: auto !important;
			}
		}
		// dropdown hover (default)
		&.#{class('menu', 'active')} > .#{class('menu', 'name')},
		&>.#{class('button', 'dropdown-toggle')}:focus + .#{class('menu', 'name')},
		&>.#{class('button', 'dropdown-toggle')}:hover + .#{class('menu', 'name')},
		&>.#{class('menu', 'name')}:focus,
		&>.#{class('menu', 'name')}:hover {
			display: block;
		}
		// clickable dropdown
		&.#{class('button', 'dropdown-clickable')} {
			&>.#{class('button', 'dropdown-toggle')}:hover + .#{class('menu', 'name')} {
				display: none;
			}
			&>.#{class('button', 'dropdown-toggle')}:focus + .#{class('menu', 'name')},
			&>.#{class('button', 'dropdown-toggle')}:active + .#{class('menu', 'name')} {
				display: block;
			}
		}
		///
		/// BUTTON GROUPS
		///
		@if options('button', 'features', 'group') {
			&>.#{class('button', 'group')} {
				&>.#{class('button', 'dropdown-toggle')}:nth-last-child(2) {
					border-bottom-right-radius: if(theme('elements', 'button', 'radius'), theme('elements', 'button', 'radius'), theme('border', 'radius'));
					border-top-right-radius: if(theme('elements', 'button', 'radius'), theme('elements', 'button', 'radius'), theme('border', 'radius'));
				}
			}
		}
		///
		/// SIZES
		///
		@if options('button', 'features', 'sizes') {
			@include button-sizes(true);
		}
	}
}

///
/// Button Group
///
@mixin button-group() {
	.#{class('button', 'group')} {
		display: inline-flex;
		flex-wrap: wrap;
		flex-shrink: 0;
		border-radius: if(theme('elements', 'button', 'radius'), theme('elements', 'button', 'radius'), theme('border', 'radius'));
		@include shadow();
		width: fit-content;
		.#{class('button', 'name')} {
			box-shadow: none;
			&:first-child:not(:last-child) {
				border-bottom-right-radius: 0;
				border-top-right-radius: 0;
			}
			&:not(:first-child):not(:last-child) {
				border-radius: 0;
				margin-left: -#{theme('border', 'width')};
			}
			&:last-child:not(:first-child) {
				border-bottom-left-radius: 0;
				border-top-left-radius: 0;
				margin-left: -#{theme('border', 'width')};
			}
		}
		///
		/// SECONDARY BUTTON
		///
		@if options('button', 'features', 'secondary') {
			&.#{class('button', 'secondary')} > .#{class('button', 'name')} {
				@include secondary-button();
			}
		}
		&.#{class('button', 'block')} {
			display: flex;
			width: auto;
			.#{class('button', 'name')} {
				flex: 1 0 0;
			}
		}
		///
		/// SIZES
		/// 
		@if options('button', 'features', 'sizes') {
			@include button-sizes(true);
		}
		///
		/// STYLES
		///
		@if options('button', 'features', 'sizes') {
			@each $theme-name, $theme-color in variables.$button-styles {
				&.#{$theme-name} > .#{class('button', 'name')},
				&.#{$theme-name} > .#{class('button', 'dropdown')} > .#{class('button', 'name')} {
					@include button-styles($theme-color, darken($theme-color, 7%));
				}
			}
		}
		// Button Link
		@include link-button();
		///
		/// DROPDOWN
		///
		@if options('button', 'features', 'dropdown') {
			.#{class('button', 'dropdown')}:last-child:not(:first-child),
			.#{class('button', 'dropdown')}:last-child:not(:first-child) > .#{class('button', 'name')} {
				border-bottom-left-radius: 0;
				border-top-left-radius: 0;
				margin-left: -1px;
			}
			.#{class('button', 'dropdown')}:last-child,
			.#{class('button', 'dropdown')}:last-child > .#{class('button', 'name')}:first-child,
			.#{class('button', 'dropdown')}:last-child > .#{class('button', 'name')}:last-child {
				border-bottom-right-radius: if(theme('elements', 'button', 'radius'), theme('elements', 'button', 'radius'), theme('border', 'radius'));
				border-top-right-radius: if(theme('elements', 'button', 'radius'), theme('elements', 'button', 'radius'), theme('border', 'radius'));
			}
			.#{class('button', 'dropdown')}:not(:first-child):not(:last-child) > .#{class('button', 'name')} {
				border-radius: 0;
				margin-left: -1px;
			}
		}
		@include breakpoints(variables('grid', 'breakpoints', 'medium'), 'max-width') {
			//button-class-group
			box-shadow: none;
		}
		///
		/// VERTICAL BUTTONS
		///
		@if options('button', 'features', 'vertical') {
			&.#{class('button', 'vertical')} {
				flex-flow: column;
				>.#{class('button', 'name')},
				&.#{class('button', 'block')},
				&.#{class('button', 'block')} > .#{class('button', 'name')},
				&>.#{class('button', 'dropdown')} >.#{class('button', 'name')} {
					width: 100%;
				}
				>.#{class('button', 'name')} {
					border-radius: 0;
					&:last-child:not(:first-child),
					&:not(:first-child):not(:last-child) {
						margin: -#{theme('border', 'width')} 0 0;
					}
				}
				&.#{class('button', 'block')} {
					display: inline-flex;
				}
				///
				/// DROPDOWN FOR VERTICAL BUTTONS
				///
				@if options('button', 'features', 'dropdown') {
					&>.#{class('button', 'dropdown')}:last-child:not(:first-child),
					&>.#{class('button', 'dropdown')}:last-child:not(:first-child) > .#{class('button', 'name')},
					&>.#{class('button', 'dropdown')}:not(:first-child):not(:last-child) > .#{class('button', 'name')} {
						margin: -#{theme('border', 'width')} 0 0;
						border-radius: 0;
					}
				}
				///
				/// STYLES
				///
				@if options('button', 'features', 'styles') {
					@each $theme-name, $theme-color in variables.$button-styles {
						&>.#{$theme-name}.#{class('button', 'name')},
						&>.#{class('button', 'dropdown')} > .#{$theme-name}.#{class('button', 'name')} {
							border: theme('border', 'width') solid darken($theme-color, 6%);
						}
					}
				}
			}
		}
	}
}

///
/// Button Styles
/// @param {Color} $bg-color
/// @param {Color} $border-color
/// @param {Boolean} $outlined
///
@mixin button-styles(
	$bg-color: theme('color', 'primary'),
	$border-color: null,
	$outlined : false
) {
	///
	/// OUTLINED STYLE
	///
	@if $outlined {
		background: transparent;
		@if(theme('type') == 'dark') {
			color: theme('color', 'negative');
		} @else {
			color: $bg-color;
		}
	} @else {
		background: $bg-color;
		color: theme('color', 'negative');
	}
	text-shadow: 0 1px 1px darken($bg-color, 6%);
	border: theme('border', 'width') theme('border', 'style') $border-color;
	&:hover {
		background: lighten($bg-color, 7.5%);
		color: theme('color', 'negative');
	}
	&:active,
	&.#{class('button', 'active')} {
		background: lighten($bg-color, 7.5%);
		color: theme('color', 'negative');
		&:focus,
		&:hover {
			background: lighten($bg-color, 12.5%);
		}
	}
	i, [class^="#{class('icon', 'class-name')}"] {
		color: theme('color', 'negative');
	}

	///
	/// GRADIENT
	///
	@if options('button', 'features', 'gradient') {
		&.#{class('button', 'gradient')} {
			background: $bg-color;
			z-index: 1;
			position: relative;
			@include set-gradient($bg-color, to top);
			&:before {
				content: "";
				position: absolute;
				top: 0;
				left: 0;
				width: 100%;
				height: 100%;
				@include set-gradient($bg-color, to bottom, 23%);
				opacity: 0;
				transition: opacity 0.25s;
				z-index: -1;
			}
			&:hover::before {
				opacity: 1;
			}
			&:active::before,
			&:focus::before {
				background: $bg-color;
				@include set-gradient($bg-color, to bottom, 27%);
			}
		}
		/// Gradient Left-To-Right
		&.#{class('button', 'gradient')}#{'-ltr'} {
			background: linear-gradient(125deg, lighten($bg-color, 21%), darken($bg-color, 5%));
		}
		/// Gradient Right-To-Left
		&.#{class('button', 'gradient')}#{'-rtl'} {
			background: linear-gradient(-125deg, lighten($bg-color, 21%), darken($bg-color, 5%));
		}
		&.#{class('button', 'gradient')}#{'-ltr'},
		&.#{class('button', 'gradient')}#{'-rtl'} {
			z-index: 1;
			position: relative;
			&:before {
				position: absolute;
				content: "";
				width: 100%;
				height: 100%;
				top: 0;
				left: 0;
				opacity: 0;
				transition: opacity 0.25s;
				z-index: -1;
				background: linear-gradient(0deg, lighten($bg-color, 21%), darken($bg-color, 2%));
			}
			&:hover::before {
				opacity: 1;
			}
			&:active::before,
			&:focus::before {
				background: linear-gradient(0deg, lighten($bg-color, 25%), $bg-color);
			}
		}
	}
	@content;
}

///
/// Button Sizes
/// @param {Boolean} $class-name
///
@mixin button-sizes($class-name: false) {
	@each $name, $font-size, $padding in variables.$button-sizes {
		@if $class-name {
			&.#{$name} > .#{class('button', 'name')},
			&.#{$name} > .#{class('button', 'dropdown')} > .#{class('button', 'name')} {
				font-size: $font-size;
				padding: $padding;
			}
		} @else {
			&.#{$name} {
				font-size: $font-size;
				padding: $padding;
			}
		}
	}
}

///
/// Secondary Button
///
@mixin secondary-button(
	$color: theme('elements', 'button', 'secondary', 'color'),
	$hover-color: theme('elements', 'button', 'secondary', 'hover-color'),
	$hover-bg: theme('elements', 'button', 'secondary', 'hover-bg'),
	$border-color: theme('elements', 'button', 'secondary', 'border-color'), 
) {
	$setColor: if($color, $color, theme('color', 'text'));
	color: $setColor;
	border-color: if($border-color, $border-color, theme('border', 'color'));
	background: theme('elements', 'button', 'secondary', 'background');
	&:focus,
	&:hover,
	&:active,
	&.#{class('button', 'active')} {
		color: if($hover-color, $hover-color, $setColor);
		background: theme('elements', 'button', 'secondary', 'hover-bg');
		//z-index: 1;
	}
	i, [class^="#{class('icon', 'class-name')}"] {
		color: $setColor;
	}
}

///
/// Link Button
///
@mixin link-button() {
	&.#{class('button', 'link')}.#{class('button', 'name')},
	&.#{class('tooltip', 'top')} > .#{class('button', 'name')} {
		@include button-styles(transparent) {
			box-shadow: none;
			border: none;
			color: theme('color', 'primary');
			text-decoration: underline;
			font-weight: theme('typography', 'font-weight');
			&:hover {
				color: theme('color', 'text');
			}
			i, [class^="#{class('icon', 'class-name')}"] {
				color: theme('color', 'text');
			}
		};
	}
}
