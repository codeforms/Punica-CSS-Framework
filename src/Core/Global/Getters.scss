///
/// Punica CSS Framework
/// Core/Global/Getters.scss
/// 

@use "../Theme/Getters" as *;
@use "../../options" as option;
@use "../../Modules/Utilities/index" as helper;
@use "Helpers";

///
/// Get options value by key
/// from the options.scss API file
///
/// @param {String(s)} $keys
///
/// @example options('grid', 'enable')
/// @example options('grid', 'features', 'equal')
///
/// @return boolean
///
@function options($keys...) 
{
	@if null == map-get(option.$options, nth($keys, 1)) {
		@warn "[INVALID KEY] #{nth($keys, 1)}" + ' key is not found or key returns null in the [options.scss] file.';
		@return null;
	}

	$value: map-get(option.$options, nth($keys, 1));

	@if length($keys) == 1 {
		@return $value;
	}

	$value: map-get($value, nth($keys, 2));

	@if null == $value {
		@warn "[INVALID KEY] #{nth($keys, 1)} > #{nth($keys, 2)}" + ' key is not found or key returns null in the [options.scss] file.';
		@return null;
	}

	@if length($keys) > 2 {
		$value: map-get($value, nth($keys, 3));
		@if null == $value {
			@warn "[INVALID KEY] #{nth($keys, 1)} > #{nth($keys, 2)} > #{nth($keys, 3)}" + ' key is not found or key returns null in the [options.scss] file.';
			@return null;
		}
	}

	@return $value;
}

///
/// Get default "settings" of a specific component/element
/// from the options.scss API file
///
/// @param {String} $node
/// @param {String} $key(s)
///
/// @example variables('grid', 'gap')
/// @example variables('grid', 'columns', 'size')
///
/// @return mixed
///
@function settings($node, $keys...) 
{
	$settings: map-get(map-get(options($node), 'settings'), nth($keys, 1));

	@if null == $settings {
		@warn "[INVALID KEY] #{$node} > settings > #{nth($keys, 1)}" + ' key is not found or key returns null in the [options.scss] file.';
		@return null;
	}
	
	@if length($keys) == 1 {
		@return $settings;
	}

	@if null == map-get($settings, nth($keys, 2)) {
		@warn "[INVALID KEY] #{$node} > settings > #{nth($keys, 1)} > #{nth($keys, 2)}" + ' key is not found or key returns null in the [options.scss] file.';
		@return null;
	}

	@return map-get($settings, nth($keys, 2));
}

///
/// Get class name of a specific component/element
/// from the options.scss API file
///
/// @param {String} $node
/// @param {String} $key
///
/// @example class('alert', 'name')
/// @example class('button', 'dropdown')
///
/// @return string
///
@function class($node, $key) 
{
	@if theme('classnames', $node, $key) != null {
		@return theme('classnames', $node, $key);
	}

	@return options($node, 'classnames', $key);
}

///
/// Get variable of a specific utility
/// 
/// @param {String} $node
/// @param {String|null} $key
///
/// @example utils('align-items')
/// @example utils('align-items', 'property')
///
/// @return string
///
@function utils($node, $key: null) 
{
	$util: if(map-has-key(helper.$helpers, $node), map-get(helper.$helpers, $node), null);

	@if ($util != null) and $key {
		$util: if(map-has-key($util, $key), map-get($util, $key), null);
	}

	@return $util;
}