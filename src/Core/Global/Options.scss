///
/// Punica CSS Framework
/// Core/Global/Options.scss
/// 

@use "sass:map" as map;
@use "sass:list" as *;
@use "../Theme/Getters" as *;
@use "Getters" as get;
@use "Helpers" as helper;

///
/// Get a specific module's variable from the theme map 
/// or from the options.scss API file, 
/// which contains the default settings.
///
/// @param {String(s)} $keys
///
/// @example module('button', 'font-weight')
/// @example module('form', 'input', 'color')
/// 
/// @return mixed
/// 
@function module($keys...) 
{
	@return set_variable($keys...);
}

///
/// Get features of a module from the theme map 
/// or from the options.scss API file, 
/// which contains the default settings.
/// 
/// @param {String} $module
/// @param {String|null} $feature
/// 
/// @example features('card', 'horizontal')
/// @example features('button', 'preloader')
///
/// @return bool
///
@function features($module, $feature : null) 
{
	@if theme($module, 'features', $feature) != null {
		@return theme($module, 'features', $feature);
	}

	@return map.get(map.get(get.options($module), 'features'), $feature);
}

///
/// Is module enabled?
///
/// @param {String} $node
/// @param {String} $module
/// 
/// @example enabled('grid')
/// @example enabled('navbar')
/// @example enabled('utilities')
/// 
/// @return bool
///
@function enabled($module: null) 
{
	@if theme('modules','enabled') != null {
		@return theme('modules', 'enabled');
	}

	@if theme('modules', $module, 'enabled') != null {
		@return theme('modules', $module, 'enabled');
	}

	@return get.options($module, 'enabled');
}

///
/// Set variable
///
/// @param {String} $module
/// @param {String(s)} $keys
///
/// @return mixed
///
@function set_variable($keys...) 
{
	$value: theme('modules', $keys...);

	@if($value != null) {
		@return $value;
	}
	
	@return get.settings($keys...);
}