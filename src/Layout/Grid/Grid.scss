///
/// Punica CSS Framework
/// Layout : Grid
///

@use "../../_global/_getters" as *;
@use "../../_global/mixins" as *;
@use "variables" as *;

/// if grid is enable
@if options('grid', 'enable') {
	.#{class('grid', 'container')} {
		width: variables('grid', 'container', 'width');
		margin: variables('grid', 'container', 'margin');
		padding: 0 variables('grid', 'container', 'padding');
	}
	@include breakpoints(variables('grid', 'breakpoints', 'medium'), 'max-width') {
		.#{class('grid', 'container')} {
			padding: 0 calc(variables('grid', 'container', 'padding') / 3);
		}
	}
	.#{class('grid', 'row')} {
		display: grid;
		grid-gap: variables('grid', 'gap');
		grid-template-columns: repeat(variables('grid', 'columns', 'size'), 1fr);
		&> [class^="#{class('grid', 'column')}"] {
			height: fit-content;
			padding: variables('grid', 'columns', 'padding');
			min-height: variables('grid', 'columns', 'min-height');
		}
		/// Equal height
		@if options('grid', 'features', 'equal') {
			&.#{class('grid', 'equal')} > [class^="#{class('grid', 'column')}"] {
				height: auto;
			}
		}
	}
	// Default Grid System
	@for $id from 1 through variables('grid', 'columns', 'size') {
		.#{class('grid', 'column')}-#{$id} {
			grid-column: span #{$id};
		}
	}
	// Breakpoints
	@each $label, $breakpoint in $viewports {
		@include breakpoints($breakpoint) {
			@for $id from 1 through variables('grid', 'columns', 'size') {
				.#{class('grid', 'column')}-#{$label}-#{$id} {
					grid-column: span #{$id};
				}
			}
		}
	}
	// Offset
	@if options('grid', 'features', 'offset') {
		@each $label, $breakpoint in $viewports {
			@include breakpoints($breakpoint) {
				@for $id from 1 through variables('grid', 'columns', 'size') {
					@for $offset-id from 2 through variables('grid', 'columns', 'size') {
						.#{class('grid', 'column')}-#{$label}-#{$id}.#{class('grid', 'offset')}-#{$label}-#{$offset-id} {
							grid-column: #{$offset-id} / span #{$id};
						}
					}
				}
			}
		}
	}
}
