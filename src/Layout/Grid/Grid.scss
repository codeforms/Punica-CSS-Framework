/////////////////////////////////////////////////////////
/// PUNICA CSS > LAYOUT : GRID
/////////////////////////////////////////////////////////
///
/// if grid is enable
///
@if options('layout', 'grid', 'enable') {
	.#{class('grid', 'container')} {
		width: $container-width;
		margin: 0 auto;
		padding: 0 $container-padding;
	}
	@include breakpoints($breakpoints-medium, 'max-width') {
		.#{class('grid', 'container')} {
			padding: 0 ($container-padding / 3);
		}
	}
	.#{class('grid', 'row')} {
		display: grid;
		grid-gap: $gutter;
		grid-template-columns: repeat($grid, 1fr);
		&> [class^="#{class('grid', 'column')}"] {
			height: fit-content;
			padding: $column-padding;
			min-height: $column-min-height;
		}
		///
		/// EQUAL
		///
		@if options('layout', 'grid', 'features', 'equal') {
			&.#{class('grid', 'equal')} > [class^="#{class('grid', 'column')}"] {
				height: auto;
			}
		}
	}
	@each $label, $breakpoint in $viewports {
		@include breakpoints($breakpoint) {
			@for $id from 1 through $grid {
				.#{class('grid', 'column')}-#{$id},
				.#{class('grid', 'column')}-#{$label}-#{$id} {
					grid-column: span #{$id};
				}
				///
				/// OFFSET
				///
				@if options('layout', 'grid', 'features', 'offset') {
					@for $offset-id from 2 through $grid {
						.#{class('grid', 'column')}-#{$label}-#{$id}.#{class('grid', 'offset')}-#{$label}-#{$offset-id} {
							grid-column: #{$offset-id} / span #{$id};
						}
					}
				}
			}
		}
	}
}
